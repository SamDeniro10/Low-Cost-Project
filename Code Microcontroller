#include <Wire.h>
#include "SensirionI2CSen5x.h"
#include <Ethernet.h>
#include <PubSubClient.h>

// Ethernet-Konfiguration
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; // MAC-Adresse
IPAddress mqtt_server(192, 168, 1, 100); // IP-Adresse des MQTT-Brokers
const int mqtt_port = 1883;
const char* mqtt_topic = "batterieproduktion/sensorwerte";

// MQTT-Client und Ethernet
EthernetClient ethClient;
PubSubClient client(ethClient);

// SEN55-Sensor
SensirionI2CSen5x sen55Sensor;

// Variablen für Zeitsteuerung
unsigned long letzteMessung = 0;
const unsigned long intervall = 600000; // 10 Minuten in Millisekunden

// Funktion zur Umrechnung von Partikelmasse (µg/m³) in Partikelanzahl (Partikel/m³)
float masseZuAnzahl(float masse, float radius) {
    const float dichte = 1.65; // Dichte in g/cm³
    const float pi = 3.14159;

    // Berechnung des Volumens eines kugelförmigen Partikels (Radius in µm)
    float radius_cm = radius * 1e-4; // Umrechnung von µm in cm
    float volumen = (4.0 / 3.0) * pi * pow(radius_cm, 3); // Volumen in cm³
    float partikel_masse = dichte * volumen * 1e6; // Masse in µg

    // Anzahl der Partikel pro m³ berechnen
    return masse / partikel_masse;
}

void setup() {
    Serial.begin(115200);
    Wire.begin();

    // Ethernet starten
    Serial.println("Ethernet wird initialisiert...");
    if (Ethernet.begin(mac) == 0) {
        Serial.println("Ethernet-Fehler: DHCP fehlgeschlagen.");
        while (true); // Keine weitere Ausführung
    }
    Serial.print("Ethernet verbunden. IP-Adresse: ");
    Serial.println(Ethernet.localIP());

    // MQTT konfigurieren
    client.setServer(mqtt_server, mqtt_port);

    // SEN55-Sensor initialisieren
    sen55Sensor.begin(Wire);
    uint16_t error = sen55Sensor.deviceReset();
    if (error) {
        Serial.println("Fehler bei der Initialisierung des Sensors.");
        while (true);
    }
}

void loop() {
    if (!client.connected()) {
        reconnectMQTT();
    }
    client.loop();

    // Prüfen, ob 10 Minuten vergangen sind
    if (millis() - letzteMessung >= intervall) {
        letzteMessung = millis();

        // Sensordaten lesen
        float temperatur, luftfeuchtigkeit, pm1p0, pm2p5, pm4p0, pm10p0;
        float vocIndex, noxIndex; // Werte werden nur aufgefangen, aber nicht verarbeitet

        uint16_t error = sen55Sensor.readMeasuredValues(pm1p0, pm2p5, pm4p0, pm10p0, temperatur, luftfeuchtigkeit, vocIndex, noxIndex);

        if (error) {
            Serial.println("Fehler beim Lesen der Sensordaten.");
        } else {
            // Partikelanzahl berechnen
            float pm1_anzahl = masseZuAnzahl(pm1p0, 0.5);    // PM1.0 (Radius 0,5 µm)
            float pm2_5_anzahl = masseZuAnzahl(pm2p5, 1.25); // PM2.5 (Radius 1,25 µm)
            float pm4_anzahl = masseZuAnzahl(pm4p0, 2.0);    // PM4.0 (Radius 2,0 µm)
            float pm10_anzahl = masseZuAnzahl(pm10p0, 5.0);  // PM10 (Radius 5,0 µm)

            // Messwerte anzeigen
            Serial.print("Temperatur: ");
            Serial.print(temperatur, 2);
            Serial.println(" °C");

            Serial.print("Luftfeuchtigkeit: ");
            Serial.print(luftfeuchtigkeit, 2);
            Serial.println(" %");

            Serial.print("PM1.0 Anzahl: ");
            Serial.print(pm1_anzahl, 2);
            Serial.println(" Partikel/m³");

            Serial.print("PM2.5 Anzahl: ");
            Serial.print(pm2_5_anzahl, 2);
            Serial.println(" Partikel/m³");

            Serial.print("PM4.0 Anzahl: ");
            Serial.print(pm4_anzahl, 2);
            Serial.println(" Partikel/m³");

            Serial.print("PM10 Anzahl: ");
            Serial.print(pm10_anzahl, 2);
            Serial.println(" Partikel/m³");

            // Messwerte an MQTT-Broker senden
            sendToMQTT(temperatur, luftfeuchtigkeit, pm1_anzahl, pm2_5_anzahl, pm4_anzahl, pm10_anzahl);
        }
    }
}

// Funktion zur erneuten Verbindung mit dem MQTT-Broker
void reconnectMQTT() {
    while (!client.connected()) {
        Serial.print("Verbindung zu MQTT-Broker...");
        if (client.connect("ESP32Client")) {
            Serial.println("Verbunden.");
        } else {
            Serial.print("Fehlgeschlagen, rc=");
            Serial.print(client.state());
            Serial.println(" Neuer Versuch in 5 Sekunden.");
            delay(5000);
        }
    }
}

// Funktion zum Senden der Sensordaten an den MQTT-Broker
void sendToMQTT(float temperatur, float luftfeuchtigkeit, float pm1_anzahl, float pm2_5_anzahl, float pm4_anzahl, float pm10_anzahl) {
    // JSON-Objekt erstellen
    String payload = "{";
    payload += "\"temperatur\":" + String(temperatur, 2) + ",";
    payload += "\"luftfeuchtigkeit\":" + String(luftfeuchtigkeit, 2) + ",";
    payload += "\"pm1_anzahl\":" + String(pm1_anzahl, 2) + ",";
    payload += "\"pm2_5_anzahl\":" + String(pm2_5_anzahl, 2) + ",";
    payload += "\"pm4_anzahl\":" + String(pm4_anzahl, 2) + ",";
    payload += "\"pm10_anzahl\":" + String(pm10_anzahl, 2);
    payload += "}";

    // JSON-Objekt senden
    if (client.publish(mqtt_topic, payload.c_str())) {
        Serial.println("Daten erfolgreich gesendet.");
    } else {
        Serial.println("Fehler beim Senden der Daten.");
    }
}
