#include <Wire.h>
#include "SensirionI2CSen5x.h"
#include <Ethernet.h>
#include <PubSubClient.h>

// Netzwerkkonfiguration
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };  // MAC-Adresse
IPAddress staticIP(192, 168, 1, 50);  // Statische IP des ESP32
IPAddress gateway(192, 168, 1, 1);   // Gateway
IPAddress subnet(255, 255, 255, 0);  // Subnetzmaske
IPAddress serverIP(192, 168, 1, 100); // Zielserver (z. B. MQTT-Broker)

// MQTT-Konfiguration
const int mqtt_port = 1883;
const char* mqtt_topic = "batterieproduktion/sensorwerte";

// Sensor-ID
const int sensor_nummer = 1; // Sensor-ID hier ändern (z. B. 1, 2, 3, ...)

// Objekte für Sensor und MQTT
SensirionI2CSen5x sensor;
EthernetClient ethClient;
PubSubClient mqttClient(ethClient);

// Intervall für Messungen (10 Minuten)
const unsigned long intervall = 600000;
unsigned long letzteMessung = 0;

void setup() {
    Serial.begin(115200);
    Wire.begin();

    // Ethernet und MQTT konfigurieren
    Ethernet.begin(mac, staticIP, gateway, subnet);
    mqttClient.setServer(serverIP, mqtt_port);

    // Sensor initialisieren
    sensor.begin(Wire);
    if (sensor.deviceReset()) {
        Serial.println("Fehler: Sensor konnte nicht initialisiert werden!");
        while (true);
    }

    Serial.print("System bereit. Statische IP: ");
    Serial.println(Ethernet.localIP());
}

void loop() {
    if (!mqttClient.connected()) reconnectMQTT();
    mqttClient.loop();

    if (millis() - letzteMessung >= intervall) {
        letzteMessung = millis();
        sendeSensordaten();
    }
}

void reconnectMQTT() {
    while (!mqttClient.connected()) {
        if (mqttClient.connect(String("Sensor_" + String(sensor_nummer)).c_str())) {
            Serial.println("Mit MQTT-Broker verbunden.");
        } else {
            delay(5000);
        }
    }
}

void sendeSensordaten() {
    // Partikelanzahlen und Umgebungsdaten abrufen
    float pm0p5, pm1p0, pm2p5, pm4p0, pm10p0, smallParticles, temperatur, luftfeuchtigkeit, vocIndex, noxIndex;
    if (sensor.readMeasuredPmValues(pm0p5, pm1p0, pm2p5, pm4p0, pm10p0, smallParticles, temperatur, luftfeuchtigkeit, vocIndex, noxIndex)) {
        Serial.println("Fehler beim Abrufen der Sensordaten!");
        return;
    }

    // Daten auf Serial Monitor anzeigen
    Serial.println("Sensordaten:");
    Serial.print("Temperatur: "); Serial.print(temperatur, 2); Serial.println(" °C");
    Serial.print("Luftfeuchtigkeit: "); Serial.print(luftfeuchtigkeit, 2); Serial.println(" %");
    Serial.print("PM0.5: "); Serial.print(pm0p5, 2); Serial.println(" Partikel/m³");
    Serial.print("PM1.0: "); Serial.print(pm1p0, 2); Serial.println(" Partikel/m³");
    Serial.print("PM2.5: "); Serial.print(pm2p5, 2); Serial.println(" Partikel/m³");
    Serial.print("PM4.0: "); Serial.print(pm4p0, 2); Serial.println(" Partikel/m³");
    Serial.print("PM10: "); Serial.print(pm10p0, 2); Serial.println(" Partikel/m³");

    // MQTT-Payload erstellen und senden
    String payload = "{";
    payload += "\"Sensor_id\":\"Sensor_" + String(sensor_nummer) + "\",";
    payload += "\"Temperatur\":"; payload += temperatur; payload += ",";
    payload += "\"Luftfeuchtigkeit\":"; payload += luftfeuchtigkeit; payload += ",";
    payload += "\"pm0p5\":"; payload += pm0p5; payload += ",";
    payload += "\"pm1p0\":"; payload += pm1p0; payload += ",";
    payload += "\"pm2p5\":"; payload += pm2p5; payload += ",";
    payload += "\"pm4p0\":"; payload += pm4p0; payload += ",";
    payload += "\"pm10p0\":"; payload += pm10p0; payload += "}";

    if (mqttClient.publish(mqtt_topic, payload.c_str())) {
        Serial.println("Daten erfolgreich gesendet.");
    } else {
        Serial.println("Fehler beim Senden der Daten!");
    }
}
